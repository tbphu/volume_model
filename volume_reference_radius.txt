function MAX(a, b)
  piecewise(a, a >= b, b);
end

function modulo(a, b)
  a - b*floor(a/b);
end

model volume_rheology

  // compartments
  compartment V_tot_liter;
  compartment extra = 1;
  
  //V_os = 33.7;           // um^3
  //V_b = 5. ;  
  //V_ref = 30.;
  V_tot_liter := V_tot_fl * 1e-15;
  //V_tot_fl := V_os + V_b;

 
  // species
  species c_e in extra = 240; // mM hat Bjoern gemessen (SD-F)
  // species c_i in V_tot_liter = 317; // mM
 species c_i in V_tot_liter = 440;

  // internal and external osmotic
  pi_i    := c_i * R * T ;
  pi_e    := c_e * R * T ;
  
  // constants
  R = 8.314; // J/mol/K
  T = 293; // K
  
  // geometric calculations
  G := 4*pi*r^2//(4*pi)^(1/3) * (3*V_tot_fl)^(2/3) // surface of sphere in um^2
  // radius := (3/4/pi * V_tot_fl)^(1/3); // of shpere in um
    
  
  // water flow over membrane
  Lp = 1.19e-6; // um/s/Pa #Klipp 2005
  //dV_os := -Lp * G * (pi_t + pi_e - pi_i); // water influx over the membrane -J_w
  //V_os'  = dV_os;

  // growth of non osmotic volume
  //dV_b = 0;
  //V_b' = dV_b; 
  //dV_tot := dV_os + dV_b;
  
  // plastic expansion rate 
  pi_t = 0.100e6; // Pa
  pi_tc_0 = 1e5;
  d = 0.115; // um Goldenbogen, Giese 2016
  phi = 1.e-9; // 1/Pa/s
  pi_tc := pi_tc_0
  //dV_b := 0.;
  //V_ref' = phi*radius/2/d * MAX(pi_t - pi_tc, 0)*V_ref

  // turgor dynamics
  modulus_adjustment = 3.0; // TODO: check this !!!
  E = modulus_adjustment*2.58e6; // Pa Goldenbogen, Giese 2016    
  //pi_t'  = E*2*d/radius * (dV_tot/V_ref) - E*phi* MAX(pi_t - pi_tc, 0) - pi_t/V_tot_fl * (dV_tot); 
  
  // nutrient uptake and consumptions
  k_nutrient = 2.5e-16; // mM/s/um^2   
  k_deg = 3e-17;
  => c_i; k_nutrient * G;
  c_i =>; k_deg*V_tot_fl;
  c_i=> c_e ; k_transport*(c_i-c_e)
  k_transport = 0    


   // new set of equations depending on r
 
   nu := 0.5
   V_tot_fl := 4 / 3 * pi * r^3
   V_ref := 4 /3 * pi * R^3 
   dr_b = 0
   r_b = 0.4
   r = 2.1 //(V_tot_fl / (4 /3 * pi)) ^ (1/3)
   R = r/(1 + (1 - nu) * (pi_t * r) / (E * 2 * d)) //2.287 //(V_ref / (4 /3 * pi)) ^ (1/3)
   //V =  4 /3 * pi * r^3 
       
       
   pi_t'  = E * 2 * d / (1-nu) * (dr * R - r * dR) / (R * r^2) - dr / r * pi_t 
   dR := phi * R * r / (2 * d) * MAX(pi_t - pi_tc, 0)
   //dR: = 0
   dr_os := - Lp *(pi_t + pi_e - pi_i) 
   dr := dr_os + dr_b
   r' = dr  
   R' = dR  
   
   at time > 7200: k_nutrient = 0
   at time > 7200: k_transport = 2.5e-10
      


end




